// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Roles {
  ADMIN
  USER
}

model User {
  id        String    @id @default(uuid())
  name      String
  username  String    @unique
  password  String
  role      Roles     @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  todos Todo[]

  @@map("users")
}

model Todo {
  id          String    @id @default(uuid())
  userId      String
  title       String    @unique //required
  description String?
  status      Status    @default(PENDING)
  priority    Priority  @default(MEDIUM)
  dueDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  user       User           @relation(fields: [userId], references: [id])
  categories TodoCategory[]

  @@map("todos")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique //required
  color     String   @default("#ffffff")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  todos TodoCategory[]

  @@map("categories")
}

model TodoCategory {
  todoId     String
  categoryId String
  Todo       Todo     @relation(fields: [todoId], references: [id])
  Category   Category @relation(fields: [categoryId], references: [id])

  @@unique([todoId, categoryId])
  @@map("todo_categories")
}
